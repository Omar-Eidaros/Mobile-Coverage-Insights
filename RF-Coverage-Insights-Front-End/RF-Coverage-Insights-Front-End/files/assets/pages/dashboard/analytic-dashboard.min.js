"use strict";
var deviceChartData = [], opratorVsSignalStrength = [];
devicesVsOperators();
SignalStrenghtInsights();
setOpertorCode();
fetchCount();

function fetchCount() {
    var response;
    var time = document.getElementsByClassName('update-time');
    var xhr = new XMLHttpRequest();
    xhr.open("GET", "https://immense-journey-36861.herokuapp.com/measurment/DML/countAll");
    xhr.onreadystatechange = function () {
        if (xhr.readyState == 4) {
            if (xhr.status == 200) {
                response = JSON.parse(xhr.responseText);
                console.log(response)
                document.getElementById('countries').innerText = response['countriesNo'];
                document.getElementById('measurements').innerText = response['measurementsNo'];
                document.getElementById('cells').innerText = response['cellsNo'];
                document.getElementById('telecom-operators').innerText = response['operatorsNo'];

                for (let i = 0; i < time.length; i++)
                    time[i].innerHTML = response['date'];
            }
        }
    }
    xhr.send("");
}

function devicesVsOperators() {
    var elements = '';
    var response;
    var xhr = new XMLHttpRequest();
    var exist ;

    xhr.open("GET", "https://immense-journey-36861.herokuapp.com/analytics/getDevicesInsightsByOperator");

    xhr.onreadystatechange = function () {
        if (xhr.readyState == 4) {
            if (xhr.status == 200) {
                response = JSON.parse(xhr.responseText);
                console.log(response)
                response['device'].forEach(element => {
                    exist = false;
                    deviceChartData.forEach(record => {
                        if (record['device'] === element['deviceName']) {
                            record[element['operator']] = calculateSignalLevel(element['signalStrength']);
                            exist = true;
                        }
                    })
                    if (!exist) {
                        let obj = {}
                        obj.device = element['deviceName'],
                            obj[element['operator']] = calculateSignalLevel(element['signalStrength'])
                        deviceChartData.push(obj);
                    }
                });
                console.log(deviceChartData)
                drawCharts();
            }

            
        }
    }
    xhr.send("");
}


function SignalStrenghtInsights() {
    var response;
    var signal_level;
    var xhr = new XMLHttpRequest();
    xhr.open("GET", "https://immense-journey-36861.herokuapp.com/analytics/getSignalStregnthPerOperator");
    xhr.onreadystatechange = function () {
        if (xhr.readyState == 4) {
            if (xhr.status == 200) {
                response = JSON.parse(xhr.responseText);
                for (let operator in response) {
                    signal_level = calculateSignalLevel(response[operator]),
                        opratorVsSignalStrength.push({ type: operator, visits: signal_level })
                }
                drawCharts();
            }
        }
    }
    xhr.send("");
}
function calculateSignalLevel(signal_strength) {
    if (Math.abs(parseInt(signal_strength)) <= 60) {
        return "4"
    }
    else if (Math.abs(parseInt(signal_strength)) <= 80) {
        return "3"

    }
    else if (Math.abs(parseInt(signal_strength)) <= 100) {
        return "2"

    }
    else {
        return "1"

    }
}
function drawCharts() {
    var a = AmCharts.makeChart("operator-signal", {
        type: "serial", hideCredits: !0, theme: "light",
        dataProvider: opratorVsSignalStrength,
        valueAxes: [{
            gridAlpha: .3, gridColor: "#fff", axisColor: "transparent",
            color: "#fff", dashLength: 0
        }],
        gridAboveGraphs: !0, startDuration: 1,
        graphs: [{
            balloonText: "Signal Strength Level: <b>[[value]]</b>",
            fillAlphas: 1, lineAlpha: 1, lineColor: "#fff", type: "column",
            valueField: "visits", columnWidth: .25
        }],
        chartCursor: {
            categoryBalloonEnabled: !1,
            cursorAlpha: 0, zoomable: !1
        },
        categoryField: "type",
        categoryAxis: {
            gridPosition: "start", gridAlpha: 0,
            axesAlpha: 0, lineAlpha: 0, fontSize: 12, color: "#fff", tickLength: 0
        }, export: { enabled: !1 }
    });
    /*************************** Device Vs Operator ****************************/
    am4core.ready(function () {

        // Themes begin
        am4core.useTheme(am4themes_animated);
        // Themes end



        var chart = am4core.create('device-operator-chart', am4charts.XYChart)
        chart.colors.list = [
            am4core.color("#E60000"),
            am4core.color("#F76300"),
            am4core.color("#56BB09"),
            am4core.color("#813693"),
        ];


        chart.legend = new am4charts.Legend()
        chart.legend.position = 'top'
        chart.legend.paddingBottom = 20
        chart.legend.labels.template.maxWidth = 25

        var xAxis = chart.xAxes.push(new am4charts.CategoryAxis())
        xAxis.dataFields.category = 'device'
        xAxis.renderer.cellStartLocation = 0.1
        xAxis.renderer.cellEndLocation = 0.9
        xAxis.renderer.grid.template.location = 0;

        var yAxis = chart.yAxes.push(new am4charts.ValueAxis());
        yAxis.min = 0;

        function createSeries(value, name) {
            var series = chart.series.push(new am4charts.ColumnSeries())
            series.dataFields.valueY = value
            series.dataFields.categoryX = 'device'
            series.name = name

            series.events.on("hidden", arrangeColumns);
            series.events.on("shown", arrangeColumns);
            
            var bullet = series.bullets.push(new am4charts.LabelBullet())
            bullet.interactionsEnabled = false
            bullet.dy = 30;
            bullet.label.text = '{valueY}'
            bullet.label.fill = am4core.color('#ffffff')
            return series;
        }

        chart.data = deviceChartData


        createSeries('vodafone', 'Vodafone');
        createSeries('orange', 'Orange');
        createSeries('etisalat', 'Etisalat');
        createSeries('we', 'We');

        function arrangeColumns() {

            var series = chart.series.getIndex(0);

            var w = 1 - xAxis.renderer.cellStartLocation - (1 - xAxis.renderer.cellEndLocation);
            if (series.dataItems.length > 1) {
                var x0 = xAxis.getX(series.dataItems.getIndex(0), "categoryX");
                var x1 = xAxis.getX(series.dataItems.getIndex(1), "categoryX");
                var delta = ((x1 - x0) / chart.series.length) * w;
                if (am4core.isNumber(delta)) {
                    var middle = chart.series.length / 2;

                    var newIndex = 0;
                    chart.series.each(function (series) {
                        if (!series.isHidden && !series.isHiding) {
                            series.dummyData = newIndex;
                            newIndex++;
                        }
                        else {
                            series.dummyData = chart.series.indexOf(series);
                        }
                    })
                    var visibleCount = newIndex;
                    var newMiddle = visibleCount / 2;

                    chart.series.each(function (series) {
                        var trueIndex = chart.series.indexOf(series);
                        var newIndex = series.dummyData;

                        var dx = (newIndex - trueIndex + middle - newMiddle) * delta

                        series.animate({ property: "dx", to: dx }, series.interpolationDuration, series.interpolationEasing);
                        series.bulletsContainer.animate({ property: "dx", to: dx }, series.interpolationDuration, series.interpolationEasing);
                    })
                }
            }
        }

    });
}


function setOpertorCode() {
    var elements = '';
    var response;
    var xhr = new XMLHttpRequest();
    xhr.open("GET", "https://immense-journey-36861.herokuapp.com/analytics/getOperatorCode");
    xhr.onreadystatechange = function () {
        if (xhr.readyState == 4) {
            if (xhr.status == 200) {
                response = JSON.parse(xhr.responseText);
                for (let i = 0; i < Object.size(response['operatorCode']); i++) {


                    elements += '<tr>\
    <td>'+ response['operatorCode'][i]['country'] + '</td>\
    <td class="country">'+ response['operatorCode'][i]['operator'] + '</td>\
    <td class="operator">'+ response['operatorCode'][i]['mcc'] + '</td>\
    <td class="text-right">'+ response['operatorCode'][i]['mnc'] + '</td>\
    </tr>'
                }
                document.getElementById("operator-code").innerHTML = elements
                elements = '';
            }
        }
    }
    xhr.send("");



}

Object.size = function (obj) {
    var size = 0,
        key;
    for (key in obj) {
        if (obj.hasOwnProperty(key)) size++;
    }
    return size;
};


